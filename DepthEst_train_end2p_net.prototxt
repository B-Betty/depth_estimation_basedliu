name: "DepthEstimation"
layer{
  name: "data"
  type: "HDF5Data"
  top: "data"
  top: "label"
  include{
    phase: TRAIN
  }
  hdf5_data_param{
    source: "examples/Depth_estimation_basedLiu/train.txt"
    batch_size: 5
  }
}
layer{
  name: "data"
  type: "HDF5Data"
  top: "data"
  top: "label"
  include{
    phase: TEST
  }
  hdf5_data_param{
    source: "examples/Depth_estimation_basedLiu/test.txt"
    batch_size: 5
  }
}

layer {
  name: "conv1_1_self"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1_self"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 5
    kernel_size: 11
  }
}

layer {
  bottom: "conv1_1_self"
  top: "conv1_1_self"
  name: "relu1_1"
  type: "ReLU"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_1_self"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "conv1_2_self"
  type: "Convolution"
  bottom: "pool1"
  top: "conv1_2_self"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 1
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv1_2_self"
  top: "conv1_2_self"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv1_2_self"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 1
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  bottom: "conv3_1"
  top: "conv3_1"
  type: "ReLU"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 1
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 1
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}


layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "fc6_self"
  type: "InnerProduct"
  bottom: "pool4"
  top: "fc6_self"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 1
  }
  
  inner_product_param {
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    num_output: 4096
  }
}
layer {
  bottom: "fc6_self"
  top: "fc6_self"
  name: "relu7"
  type: "ReLU"
}
layer {
  bottom: "fc6_self"
  top: "fc6_self"
  name: "drop7"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "fc7_self"
  type: "InnerProduct"
  bottom: "fc6_self"
  top: "fc7_self"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 1
  }
  
  inner_product_param {
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    num_output: 128
  }
}
layer {
  bottom: "fc7_self"
  top: "fc7_self"
  name: "relu7"
  type: "ReLU"
}

layer {
  name: "fc8_self"
  type: "InnerProduct"
  bottom: "fc7_self"
  top: "fc8_self"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 1
  }
  
  inner_product_param {
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    num_output: 16
  }
}
layer {
  bottom: "fc8_self"
  top: "fc8_self"
  name: "sig1"
  type: "Sigmoid"
}

layer {
  name: "fc9_self"
  type: "InnerProduct"
  bottom: "fc8_self"
  top: "fc9_self"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 1
  }
  
  inner_product_param {
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    num_output: 1
  }
}

layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "fc9_self"
  bottom: "label"
  top: "loss"
}